{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React-Redux container component": {
		"prefix": "container",
		"body": [
			"import * as React from \"react\"",
			"import { connect } from \"react-redux\"",
			"import { State as ReduxState, Action as ReduxAction } from \"../state\"",
			"",
			"type OwnProps = {",
			"}",
			"",
			"type State = {",
			"}",
			"",
			"type Props = OwnProps &",
			"  ReturnType<typeof mapStateToProps> &",
			"  ReturnType<typeof mapDispatchToProps>",
			"",
			"class $TM_FILENAME_BASE extends React.Component<Props, State> {",
			"  render() {",
			"    return null",
			"  }",
			"}",
			"",
			"function mapStateToProps(state: ReduxState, ownProps: OwnProps) {",
			"  return {",
			"  }",
			"}",
			"",
			"function mapDispatchToProps(",
			"  dispatch: (action: ReduxAction) => void,",
			"  ownProps: OwnProps,",
			") {",
			"  return {",
			"  }",
			"}",
			"",
			"export default connect(",
			"  mapStateToProps,",
			"  mapDispatchToProps,",
			")($TM_FILENAME_BASE)",
		]
	},
	"React component": {
		"prefix": "component",
		"body": [
			"import React, {Component} from \"react\"",
			"",
			"type Props = {}",
			"type State = {}",
			"",
			"export default class $TM_FILENAME_BASE extends Component<Props, State> {",
			"  render(){",
			"    return null",
			"  }",
			"}"
		]
	},
	"React functional component":{
		"prefix": "fcomponent",
		"body": [
			"import { FC } from \"react\"",
			"",
			"export type ${TM_FILENAME_BASE}Props = {}",
			"",
			"export const $TM_FILENAME_BASE: FC<${TM_FILENAME_BASE}Props> = ({}) => {",
			"  return null",
			"}",
		]
	},
	"React functional component (secondary)":{
		"prefix": "fcomponent2",
		"body": [
			"type $1Props = {}",
			"",
			"function $1(props: $1Props): ReactElement | null {",
			"  return ${2:null}",
			"}",
		]
	},
	"Apollo GraphQL querying component": {
		"prefix": "gqcomponent",
		"body": [
			"import React, { ReactElement } from \"react\"",
			"import gql from \"graphql-tag\"",
			"import { $TM_FILENAME_BASE, ${TM_FILENAME_BASE}Variables } from \"./__generated__/$TM_FILENAME_BASE\"",
			"import { useQuery } from \"@apollo/react-hooks\"",
			"",
			"type Props = {}",
			"",
			"const QUERY = gql`",
			"  query $TM_FILENAME_BASE {}",
			"`",
			"",
			"export default function $TM_FILENAME_BASE(props: Props): ReactElement | null {",
			"  const query = useQuery<$TM_FILENAME_BASE, ${TM_FILENAME_BASE}Variables>(QUERY)",
			"  return null",
			"}",
		]
	},
	"Apollo GraphQL fragment component": {
		"prefix": "gfcomponent",
		"body": [
			"import React, { ReactElement } from \"react\"",
			"import gql from \"graphql-tag\"",
			"import { ${TM_FILENAME_BASE}_$1 } from \"./__generated__/${TM_FILENAME_BASE}_$1\"",
			"import { useQuery } from \"@apollo/react-hooks\"",
			"",
			"type Props = { $1: ${TM_FILENAME_BASE}_$1 }",
			"",
			"$TM_FILENAME_BASE.fragments = {",
			"  $1: gql`",
			"    fragment ${TM_FILENAME_BASE}_$1 on $2 {}",
			"  `,",
			"}",
			"",
			"export default function $TM_FILENAME_BASE(props: Props): ReactElement | null {",
			"  return null",
			"}",
		]
	},
	"React Native stylesheet": {
		"prefix": "stylesheet",
		"body": [
			"const style = StyleSheet.create({$0})"
		]
	},
	"CSS Module import": {
		"prefix": "importcss",
		"body": "import * as css from \"./$TM_FILENAME_BASE.module.css\""
	}
}